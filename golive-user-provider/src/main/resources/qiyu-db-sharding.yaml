dataSources:
  user_master: ##新表，重建的分表
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://39.101.202.169:8808/qiyu_live_user?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: root
  user_slave0: ##新表，重建的分表
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://39.101.202.169:8809/qiyu_live_user?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: root
rules:
    - !READWRITE_SPLITTING
      dataSources:
        user_ds:
          staticStrategy:
            writeDataSourceName: user_master
            readDataSourceNames:
              - user_slave0
    - !SINGLE
      defaultDataSource: user_ds # 不分表分分库的默认数据源
    - !SHARDING
      tables:
        t_user:
          actualDataNodes: user_ds.t_user_${(0..99).collect(){it.toString().padLeft(2,'0')}}
          tableStrategy:
            standard:
              shardingColumn: user_id
              shardingAlgorithmName: t_user-inline
      shardingAlgorithms:
        t_user-inline:
          type: INLINE
          props:
            algorithm-expression: t_user_${(user_id % 100).toString().padLeft(2,'0')}
props:
  sql-show: true